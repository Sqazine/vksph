#version 450 core

#define WORK_GROUP_SIZE 128
#define PARTICLE_NUM 20000
#define PI 3.1415927410125732421875
#define PARTICLE_RADIUS 0.005f
#define PARTICLE_RESTING_DENSITY 1000
#define PARTICLE_MASS 0.02 //m=pv
#define SMOOTHING_LENGTH (4*PARTICLE_RADIUS)
#define PARTICLE_VISCOSITY 3000.0f
#define GRAVITY_FORCE vec2(0,9806.65)

layout(local_size_x=WORK_GROUP_SIZE) in;

layout(std430,binding=0) buffer positionBuffer
{
    vec2 position[];
};

layout(std430,binding=1) buffer velocityBuffer
{
    vec2 velocity[];
};

layout(std430,binding=2) buffer forceBuffer
{
    vec2 force[];
};

layout(std430,binding=3) buffer densityBuffer
{
    float density[];
};

layout(std430,binding=4) buffer pressureBuffer
{
    float pressure[];
};

void main()
{
    uint i=gl_GlobalInvocationID.x;

    vec2 pressureForce=vec2(0,0);
    vec2 viscosityForce=vec2(0,0);

    for(uint j=0;j<PARTICLE_NUM;++j)
    {
        if(i==j)
            continue;
        
        vec2 delta=position[i]-position[j];
        float r=length(delta);
        if(r<SMOOTHING_LENGTH)
        {
            pressureForce-=PARTICLE_MASS*(pressure[i]+pressure[j])/(2.0f*density[j])*-45.0f/(PI*pow(SMOOTHING_LENGTH,6))*pow(SMOOTHING_LENGTH-r,2)*normalize(delta);
            viscosityForce+=PARTICLE_MASS*(velocity[j]-velocity[i])/density[j]*45.0f/(PI*pow(SMOOTHING_LENGTH,6))*(SMOOTHING_LENGTH-r);
        }
    }
    viscosityForce*=PARTICLE_VISCOSITY;
    vec2 externalForce=density[i]*GRAVITY_FORCE;
    
    force[i]=pressureForce+viscosityForce+externalForce;
}

